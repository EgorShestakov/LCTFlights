import geopandas as gpd
from shapely.geometry import Point
import os
import json

class RegionFinder:
    def __init__(self, shapefile_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤

        Args:
            shapefile_path: –ø—É—Ç—å –∫ shapefile (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .shp)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        required_extensions = ['.shp', '.shx', '.dbf', '.prj']
        missing_files = []

        for ext in required_extensions:
            if not os.path.exists(f"{shapefile_path}{ext}"):
                missing_files.append(f"{shapefile_path}{ext}")

        if missing_files:
            raise FileNotFoundError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º shapefile
        self.gdf = gpd.read_file(f"{shapefile_path}.shp")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if 'name' not in self.gdf.columns:
            raise ValueError("–í shapefile –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ 'name' —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤")

        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.gdf)} —Ä–µ–≥–∏–æ–Ω–æ–≤")

    def find_region(self, lon, lat):
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º

        Args:
            lat: —à–∏—Ä–æ—Ç–∞ (–≥—Ä–∞–¥—É—Å—ã)
            lon: –¥–æ–ª–≥–æ—Ç–∞ (–≥—Ä–∞–¥—É—Å—ã)

        Returns:
            str: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        point = Point(lon, lat)  # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—Ä—è–¥–æ–∫ (lon, lat)

        # –ò—â–µ–º —Ä–µ–≥–∏–æ–Ω, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ—á–∫—É
        for idx, row in self.gdf.iterrows():
            if row.geometry.contains(point):
                return row['name']

        return None

    def find_region_with_info(self, lon, lat):
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

        Args:
            lat: —à–∏—Ä–æ—Ç–∞ (–≥—Ä–∞–¥—É—Å—ã)
            lon: –¥–æ–ª–≥–æ—Ç–∞ (–≥—Ä–∞–¥—É—Å—ã)

        Returns:
            dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏–æ–Ω–µ –∏–ª–∏ None
        """
        point = Point(lon, lat)

        for idx, row in self.gdf.iterrows():
            if row.geometry.contains(point):
                return {
                    'name': row['name'],
                    'geometry_type': row.geometry.geom_type,
                    'index': idx
                }

        return None

'''
def flights_percent(coordinates):

    –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—ë—Ç–æ–≤ –≤ –Ω–∏—Ö, –∞ –ø–æ—Ç–æ–º –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ.
    –ß—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å json –∏–∑ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤, –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ñ–∞–π–ª—É LCTFlights/Regions.json - —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≥—Ä–∞–Ω–∏—Ü –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.

    :param coordinates: —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–∏–¥–∞: [(x1,y1), (x2, y2)]
    x -–¥–æ–ª–≥–æ—Ç–∞; y - —à–∏—Ä–æ—Ç–∞
    :return: —Å–ª–æ–≤–∞—Ä—å(json) –≤–∏–¥–∞:
    {
    "1":{
    "name": "–ê–ª—Ç–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "percent": p
    },
    "2":{
     "name": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
     "percent": 50
    }
    }
    –≥–¥–µ p = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—ë—Ç–æ–≤ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏/–º–∞–∫—Å.—á–∏—Å–ª–æ –ø–æ–ª—ë—Ç–æ–≤*100(–ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—ë—Ç–æ–≤)
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–±–ª–∞—Å—Ç—å –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ RegionFinder.findregion
    (—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–∞–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞).
    pass
'''


def flights_percent(coordinates):
    '''
    –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∏–∑ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—ë—Ç–æ–≤ –≤ –Ω–∏—Ö.
    –ü—Ä–æ—Ü–µ–Ω—Ç = (–ø–æ–ª–µ—Ç—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ / –æ–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª–µ—Ç–æ–≤ –ø–æ –†–§) * 100
    –°—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ = 100%
    '''
    try:
        region_finder = RegionFinder('regions_shapefile/regions_shapefile')
    except (FileNotFoundError, ValueError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ flights_percent: {e}")
        return {}
    
    # –°—á–∏—Ç–∞–µ–º –ø–æ–ª–µ—Ç—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    region_counts = {}
    total_flights = len(coordinates)
    
    if total_flights == 0:
        print("‚ö†Ô∏è –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return {}
    
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {total_flights}")
    
    for i, (lon, lat) in enumerate(coordinates, 1):
        region_name = region_finder.find_region(lat, lon)
        if region_name:
            region_counts[region_name] = region_counts.get(region_name, 0) + 1
            print(f"‚úÖ {i}/{total_flights}: ({lat:.4f}, {lon:.4f}) ‚Üí {region_name}")
        else:
            print(f"‚ùå {i}/{total_flights}: ({lat:.4f}, {lon:.4f}) ‚Üí —Ä–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not region_counts:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        return {}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
    result = {}
    total_percentage = 0
    
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:")
    print("-" * 40)
    
    for i, (region_name, count) in enumerate(region_counts.items(), 1):
        percentage = (count / total_flights) * 100
        total_percentage += percentage
        
        result[str(i)] = {
            "name": region_name,
            "percent": round(percentage, 2),
            # "absolute_count": count  # –î–æ–±–∞–≤–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        }
        
        print(f"üìç {region_name}: {count} –ø–æ–ª–µ—Ç–æ–≤ ({percentage:.2f}%)")

    # –ó–∞–≥—Ä—É–∑–∫–∞ json–∞ –≤ —Ñ–∞–π–ª
    with open('../frontend/data_from_back.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=4)

    print(f"üìä –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {total_percentage:.2f}%")
    print(f"üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(region_counts)}")
    
    print(f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    return result


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
def main():
    pass


if __name__ == "__main__":
    main()