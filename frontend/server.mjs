import http from 'http';
import fs from 'fs';
import path from 'path';
import {fileURLToPath} from 'url';

import {mapStats} from "./data_mapStats.js";
import {regionAnalytics} from "./data_regionAnalitics.js";
import {contracts} from "./LCTFlights-react/src/contracts.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const port = 3000;

const jsonData = JSON.parse(fs.readFileSync("data2.json"));

function getContentType(filePath) {
    const ext = path.extname(filePath).toLowerCase();
    const mimeTypes = {
        '.html': 'text/html',
        '.js': 'text/javascript',
        '.css': 'text/css',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.ico': 'image/x-icon',
        '.txt': 'text/plain',
    };
    return mimeTypes[ext] || 'application/octet-stream';
}

function parseQueryParams(url) {
    const query = {};
    const queryString = url.split('?')[1];
    if (queryString) {
        queryString.split('&').forEach(param => {
            const [key, value] = param.split('=');
            query[key] = value ? decodeURIComponent(value) : true;
        });
    }
    return query;
}

const server = http.createServer((req, res) => {
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', 'http://localhost:5173');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }

    if (req.method === 'GET') {
        // ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç contracts.mapStats
        // if (req.url === '/map/stats' || /^\/map\/stats\?/.test(req.url)) {
        if (req.url === "/flights_percent" || /^\/map\/stats\?/.test(req.url)) {
            const queryParams = parseQueryParams(req.url);
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(mapStats));
        }
        // ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç contracts.flights
        else if (req.url === '/flights' || /^\/flights\?/.test(req.url)) {
            const flightsData = {
                flights: [
                    {
                        region_id: 23,
                        timestamp_start: "2024-01-15T08:00:00Z",
                        timestamp_end: "2024-01-15T08:45:30Z",
                        duration_seconds: 2730,
                        distance_meters: 15200,
                        status: "completed",
                        violations: [],
                        operator_id: "operator_7",
                        operator_name: "–ê—ç—Ä–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                        drone_model: "DJI Matrice 300",
                        drone_serial: "DJI123456789"
                    }
                ],
                pagination: {
                    page: 1,
                    limit: 20,
                    total_count: 1,
                    total_pages: 1
                }
            };
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(flightsData));
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints
        else if (req.url === '/update') {
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(jsonData));
        } else if (/^\/regions\/\d+\/analytics(\?.*)?$/.test(req.url)) {
            const match = req.url.match(/\/regions\/(\d+)\/analytics/);
            const regionId = match ? match[1] : '1';

            const response = {
                ...regionAnalytics,
                region_id: parseInt(regionId)
            };

            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(response));
        } else if (req.url === '/regions') {
            const regionsData = {
                regions: {
                    "23": {name: "–ê–ª—Ç–∞–π—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "ALT", area_sq_km: 167996},
                    "14": {name: "–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", code: "TOM", area_sq_km: 314391}
                },
                total_count: 2
            };
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(regionsData));
        } else {
            // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            let filePath = req.url === '/' ? '/index.html' : req.url;
            filePath = path.join(__dirname, 'LCTFlights-react','dist', filePath);
            // filePath = path.join(__dirname, 'public', filePath);

            fs.stat(filePath, (err, stats) => {
                if (err || !stats.isFile()) {
                    res.writeHead(404, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}));
                    return;
                }

                const contentType = getContentType(filePath);
                res.writeHead(200, {'Content-Type': contentType});

                const stream = fs.createReadStream(filePath);
                stream.pipe(res);
                stream.on('error', () => {
                    res.writeHead(500, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'}));
                });
            });
        }
    } else if (req.method === 'POST') {
        // ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç contracts.postFile
        if (req.url === '/post') {
            const contentType = req.headers['content-type'];

            if (!contentType || !contentType.includes('multipart/form-data')) {
                res.writeHead(400, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({error: '–¢–æ–ª—å–∫–æ multipart/form-data –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}));
                return;
            }

            let body = Buffer.alloc(0);

            req.on('data', (chunk) => {
                body = Buffer.concat([body, chunk]);
            });

            req.on('end', () => {
                try {
                    // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
                    console.log('üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ /post');
                    console.log(`   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${body.length} –±–∞–π—Ç`);
                    console.log(`   Content-Type: ${contentType}`);

                    res.writeHead(200, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({
                                               success: true,
                                               message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ /post',
                                               size: body.length
                                           }));

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
                    res.writeHead(500, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞'}));
                }
            });
        }
        // ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç contracts.generateReport
        else if (req.url === '/reports/generate') {
            let body = '';
            req.on('data', chunk => {
                body += chunk.toString();
            });
            req.on('end', () => {
                console.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', body);

                res.writeHead(200, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({
                                           success: true,
                                           message: '–û—Ç—á–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
                                           job_id: 'report_' + Date.now(),
                                           status: 'processing'
                                       }));
            });
        } else {
            res.writeHead(404, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω'}));
        }
    } else {
        res.writeHead(405, {'Content-Type': 'application/json'});
        res.end(JSON.stringify({error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}));
    }
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('Received SIGINT. Shutting down gracefully');
    server.close(() => {
        console.log('Server closed');
        process.exit(0);
    });
});

process.on('SIGTERM', () => {
    console.log('Received SIGTERM. Shutting down gracefully');
    server.close(() => {
        console.log('Server closed');
        process.exit(0);
    });
});

server.listen(port, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log('üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
    console.log('   GET  /map/stats        ‚úÖ');
    console.log('   GET  /flights          ‚úÖ');
    console.log('   POST /post             ‚úÖ');
    console.log('   POST /reports/generate ‚úÖ');
    console.log('   GET  /regions');
    console.log('   GET  /regions/{id}/analytics');
});